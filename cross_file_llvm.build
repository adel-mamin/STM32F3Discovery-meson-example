[binaries]
c       = 'clang-5.0'
cpp     = 'clang++-5.0'
ld      = 'llvm-link-5.0'
ar      = 'llvm-ar-5.0'
as      = 'llvm-as-5.0'
size    = 'llvm-size-5.0'
objdump = 'llvm-objdump-5.0'
objcopy = 'arm-none-eabi-objcopy'
strip   = 'arm-none-eabi-strip'
gdb     = 'arm-none-eabi-gdb'

[properties]
c_args      = ['-Wno-reserved-id-macro',
               '-Wno-unused-macros',
               '-Wno-documentation',
               '-Wno-parentheses-equality',
               '-Wno-unused-parameter',
               '-Wno-padded',
               '-Wno-documentation-unknown-command',
               '-Wno-missing-noreturn',
               '-Wno-undef',
               '-Wno-keyword-macro',
               '-Wno-cast-align',
               '-Wno-conversion',
               '-Wno-covered-switch-default',
               '-Wno-empty-translation-unit',
               '-Wno-switch-enum',
               '-Wno-missing-variable-declarations',

               '-fshort-enums',# otherwise errors at linking...


               '-fmessage-length=0',        # all error warnings in a single line (default 72)
               '-fsigned-char',             # char is per default unsigned
               '-ffunction-sections',       # each function to a seperate section ==> Code-optimization / deletion
               '-fdata-sections',           # each variable to a seperate section ==> Code-optimization / deletion

               '-Weverything',
               '-ffreestanding',

               # '-emit-llvm'
               #  '-flto',
               # '-nostdinc',
               # '-fPIC',
               # '-specs=rdimon.specs',
               ]

c_link_args = ['--target=arm-none-eabi', # define target for linker
               '-Wl,--as-needed',        # linker optimasation
              # '-specs=nosys.specs',    # define newlib spec [nano.specs / nosys.specs]
               '-Wl,-Map,output.map',    # create linker map file
               '-Wl,--gc-sections',      # needed for optimization
               '-flto',

               '-nostdlib',
              ]

stm32cube_as_static = false
# stm32cube_as_static = true


[host_machine]
system     = 'none'
cpu_family = 'arm'
cpu        = 'cortex-m4'
endian     = 'little'

# arm-none-eabi-g++ -mcpu=cortex-m4
                  # -mthumb
                  # -Og
                  # -fmessage-length=0
                  # -fsigned-char
                  # -ffunction-sections
                  # -fdata-sections
                  # -ffreestanding
                  # -fno-move-loop-invariants
                  # -Wall
                  # -Wextra
                  # -g3
                  # -T mem.ld
                  # -T libs.ld
                  # -T sections.ld
                  # -nostartfiles
                  # -Xlinker --gc-sections
                  # -L"../ldscripts"
                  # -Wl,-Map,"STM32F3Discovery_Blink.map"
                  # --specs=nano.specs
                  # -o "STM32F3Discovery_Blink.elf" $(
                  # OBJS) $(USER_OBJS) $(LIBS)


# https://github.com/martinribelotta/cortex-m-llvm/blob/master/Makefile
# http://eecs.umich.edu/courses/eecs373/readings/Linker.pdf
# https://wiki.dlang.org/Minimal_semihosted_ARM_Cortex-M_%22Hello_World%22
# http://disconnected.systems/blog/bare-metal-c-on-the-teensy-3.1/
# http://www.scoberlin.de/content/media/http/informatik/gcc_docs/ld_3.html
# readelf -S llvmbuild/main.elf
# http://www.emprog.com/support/documentation/thunderbench-Linker-Script-guide.pdf
# http://infocenter.arm.com/help/topic/com.arm.doc.ddi0210c/DDI0210B.pdf
# http://www.bravegnu.org/gnu-eprog/c-startup.html
